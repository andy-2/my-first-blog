коммандная строка (ConEmu)
	# cd d:\andy_projects\py_djangogirls\Scripts\
    # activate              
	# cd d:\andy_projects\py_djangogirls\
	# python manage.py runserver
=======================================================

*** Виртуальное окружение
	# python -m venv py_djangogirls
	# cd py_djangogirls\Scripts
	# activate
	# python -m pip install --upgrade pip
	# pip install django
	# django-admin.exe startproject mysite .

*** изменения в mysite/settings.py
	TIME_ZONE = 'Europe/Moscow'
	LANGUAGE_CODE = 'ru-ru'
	STATIC_URL = '/static/'
	STATIC_ROOT = os.path.join(BASE_DIR, 'static')

*** Чтобы создать базу данных для нашего блога: 
	# python manage.py migrate
	# python manage.py runserver

Создание приложения
	# cd d:\andy_projects\py_djangogirls\
	# python manage.py startapp blog

mysite/settings.py
	INSTALLED_APPS = [
	    'blog',
	]

*** Создание модели записи в блоге
	blog/models.py, удали весь текст и вставь на его место следующий код:

		from django.conf import settings
		from django.db import models
		from django.utils import timezone

		class Post(models.Model):
		    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
		    title = models.CharField(max_length=200)
		    text = models.TextField()
		    created_date = models.DateTimeField(default=timezone.now)
		    published_date = models.DateTimeField(blank=True, null=True)

		    def publish(self):
		        self.published_date = timezone.now()
		        self.save()

		    def __str__(self):
		        return self.title

*** Создаём таблицы моделей в базе данных
	# python manage.py makemigrations blog
	# python manage.py migrate blog

*** Администрирование Django
	откроем файл blog/admin.py и заменим его содержимое на:
		blog/admin.py
		from django.contrib import admin
		from .models import Post

		admin.site.register(Post)

	сначала нужно создать суперпользователя
	# python manage.py createsuperuser

*** В итоге твой код будет в трёх местах:
		1) На локальном компьютере ты будешь заниматься разработкой и тестированием. 
		2) Когда результат тебя устроит, ты загрузишь свою программу на GitHub. 
		3) А твой сайт будет на PythonAnywhere, и ты сможешь обновлять его, просто загружая новую версию кода с GitHub.

*** Установка Git
	на пятом шаге, который называется "Adjusting your PATH environment" (Настройка системной переменной Path), выбери "Use Git and optional Unix tools from the Windows Command Prompt" (Запуск Git и соответствующих Unix утилит через командную строку Windows, нижняя опция).
	Также неплохо будет выбрать опцию "Checkout Windows-style, commit Unix-style line endings".

*** Создаём Git-репозиторий
	Открой консоль и запусти эти команды в папке djangogirls:
		$ git init
		Initialized empty Git repository in ~/djangogirls/.git/
		$ git config --global user.name "andy-2"
		$ git config --global user.email temp2box@gmail.com

	Git будет отслеживать изменения всех файлов и каталогов в заданной директории, однако некоторые из них мы предпочли бы игнорировать. Для этого нам нужно создать файл .gitignore в корневом каталоге репозитория.
		*.pyc
		*~
		__pycache__
		myvenv
		db.sqlite3
		/static
		.DS_Store
	И сохрани его как .gitignore в корневом каталоге "djangogirls".


	Используй команду git status перед git add или в любой другой момент, когда ты не уверена, что изменения — хорошая идея. Это убережёт тебя от таких неприятных сюрпризов, как добавление неправильных файлов. Команда git status возвращает информацию обо всех ранее неотслеживаемых/изменённых/добавленных в git файлах, а также статус ветки и многое другое. Результат должен быть похож на:

		$ git status
		On branch master

		Initial commit

		Untracked files:
		  (use "git add <file>..." to include in what will be committed)

		        .gitignore
		        blog/
		        manage.py
		        mysite/

		nothing added to commit but untracked files present (use "git add" to track)
	И, наконец, мы сохраним наши изменения. Переключись на консоль и набери:
		$ git add --all .
		$ git commit -m "My Django Girls app, first commit"

===================================================================
https://githowto.com/ru/setup
Параметры установки окончаний строк
Также, для пользователей Unix/Mac:
	git config --global core.autocrlf input
	git config --global core.safecrlf true
Для пользователей Windows:
	git config --global core.autocrlf true
	git config --global core.safecrlf true
Установка отображения unicode
По умолчанию, git будет печатать не-ASCII символов в именах файлов в виде восьмеричных последовательностей \nnn. Что бы избежать нечитаемых строк, установите соответствующий флаг.
	git config --global core.quotepath off


===================================================================

*** Загружаем код в репозиторий GitHub
	Зайди на GitHub.com и создай новую бесплатную учётную запись.
	Затем создай новый репозиторий и назови его "my-first-blog". Не выбирай опцию "initialise with a README", не создавай файл .gitignore (мы сделаем это локально сами) и оставь лицензию None.
-------------------------------------------
=*=*= github.com =*=*=

@andy-2
temp2box@gmail.com
UDFHlbz-002
https://github.com/andy-2/my-first-blog.git
-------------------------------------------
	На следующем экране ты найдёшь URL для клонирования репозитория. Выбери вариант "HTTPS" и скопируй ссылку:
		https://github.com/andy-2/my-first-blog.git

	Теперь нужно связать локальный репозиторий с репозиторием на GitHub.
		$ git remote add origin https://github.com/andy-2/my-first-blog.git
		$ git push -u origin master
		Введи свое имя пользователя и пароль от аккаунта GitHub; ты должна увидеть что-то такое:

		command-line
		Username for 'https://github.com': hjwp
		Password for 'https://hjwp@github.com':
		Counting objects: 6, done.
		Writing objects: 100% (6/6), 200 bytes | 0 bytes/s, done.
		Total 3 (delta 0), reused 0 (delta 0)
		To https://github.com/hjwp/my-first-blog.git
		 * [new branch]      master -> master
		Branch master set up to track remote branch master from origin.
----------------------------------
https://github.com/andy-2/my-first-blog
----------------------------------
*** Настройка блога на PythonAnywhere
*** Регистрация на PythonAnywhere
	PythonAnywhere — это сервис по запуску кода на Python в облаке. Мы будем использовать его, чтобы разместить наш сайт «вживую» в интернете.
----------------------------------
andy2
temp2box@gmail.com
UDFHlbz-002
https://www.pythonanywhere.com/user/andy2/
----------------------------------

*** Создание API токена для PythonAnywhere
	Это нужно будет сделать только один раз. Когда ты зарегистрируешься на PythonAnywhere, откроется панель управления (dashboard). На ней в правом верхнем углу будет ссылка на страницу «Account»:
	Там выбери вкладку «API token» и нажми кнопку, на которой написано «Create new API token» (создать новый API token).
----------------------------------
	Your API token
		0242a9dddd0ec14208979a21cf277b7ef97c5ee6
	Warning: our API is new and in beta and not officially supported, and may change at any time, and it is not to be relied upon, and may cause unpredictable growth of extra ears. Extra ears not guaranteed.

	Use this token for our API by setting a request header called Authorization, followed by Token <token>, eg:
		import requests
		my_domain = 'andy2.pythonanywhere.com'
		username = 'andy2'
		token = '0242a9dddd0ec14208979a21cf277b7ef97c5ee6'

		response = requests.post(
		  'https://www.pythonanywhere.com/api/v0/user/{username}/webapps/{domain}/reload/'.format(
		      username=username, domain=my_domain
		  ),
		  headers={'Authorization': 'Token {token}'.format(token=token)}
		)
		if response.status_code == 200:
		  print('All OK')
		else:
		  print('Got unexpected status code {}: {!r}'.format(response.status_code, response.content))
	TIP: Your API token is also available from pythonanywhere consoles, tasks and webapps, as an Environment Variable, $API_TOKEN
----------------------------------
*** Настройка сайта на PythonAnywhere
	Вернись на главную страницу PythonAnywhere, кликнув логотип. Затем запусти Bash-консоль.
	есть программа-помощник, которая сделает это для тебя. Давай её установим.
		PythonAnywhere command-line
		$ pip3.6 install --user pythonanywhere
	Теперь запустим эту вспомогательную утилиту, которую ты только что установила. Она настроит твоё приложение, скачав его код с GitHub. 
		$ pa_autoconfigure_django.py https://github.com/andy-2/my-first-blog.git
	Утилита будет печатать в консоль, что она делает:
	*) Скачивает твой код с GitHub
	*) Создаёт виртуальное окружение на PythonAnywhere, такое же, как на твоём компьютере
	*) Обновляет твой файл настроек с настройками деплоя
	*) Создаёт базу данных на PythonAnywhere, используя команду manage.py migrate
	*) Разбирается с твоими статическими файлами (о них будет дальше)
	*) Настраивает PythonAnywhere так, чтобы твоё приложение было доступно в интернете
	Все эти шаги автоматизированы на PythonAnywhere, но они совершенно такие же, какие надо было бы совершить с любым другим хостинговым сервисом.

	Главное, на что нужно обратить внимание сейчас, — это то, что твоя база данных на PythonAnywhere никак не связана с базой данных на твоём компьютере. Поэтому там будут разные посты и разные аккаунты администраторов. Как следствие, для базы на PythonAnywhere необходимо создать аккаунт администратора так же, как ты это делала у себя локально с помощью команды createsuperuser. На PythonAnywhere заранее активировано виртуальное окружение, так что всё, что тебе нужно сделать — это запустить в консоли PythonAnhywhere команду:
		(andy2.pythonanywhere.com) $ python manage.py createsuperuser
-----------------------------------------------
Имя пользователя: andy2
Адрес электронной почты: temp2box@gmail.com
Password: UDFHlbz-002
Superuser created successfully.
-----------------------------------------------
*** Твой первый URL-адрес в Django!
	Мы хотим, чтобы 'http://127.0.0.1:8000/' возвращал домашнюю страничку нашего блога со списком записей в нём.
	mysite/urls.py
		from django.contrib import admin
		from django.urls import path, include

		urlpatterns = [
		    path('admin/', admin.site.urls),
		    path('', include('blog.urls')),
		]

*** blog.urls
	Создай новый пустой файл blog/urls.py:
		from django.urls import path
		from . import views

		urlpatterns = [
		    path('', views.post_list, name='post_list'),
		]
	Как ты можешь заметить, мы связали view под именем post_list с корневым URL-адресом (''). Этот шаблон URL будет соответствовать пустой строке. Это правильно, потому что для обработчиков URL в Django 'http://127.0.0.1:8000/' не является частью URL. Этот шаблон скажет Django, что views.post_list — это правильное направление для запроса к твоему веб-сайту по адресу 'http://127.0.0.1:8000/'.

	Последняя часть name='post_list' — это имя URL, которое будет использовано, чтобы идентифицировать его. Оно может быть таким же, как имя представления (англ. view), а может и чем-то совершенно другим. Мы будем использовать именованные URL позднее в проекте, поэтому важно указывать их имена уже сейчас. Мы также должны попытаться сохранить имена URL-адресов уникальными и легко запоминающимися.

	Если сейчас ты попытаешься открыть страницу http://127.0.0.1:8000/ в браузере, то увидишь сообщение о том, что веб-страница недоступна. Это произошло потому, что сервер (помнишь, как мы набирали runserver?) перестал обрабатывать запросы. Чтобы понять почему, открой окно своей командной строки.

*** blog/views.py
		from django.shortcuts import render

		def post_list(request):
		    return render(request, 'blog/post_list.html', {})

*** Твой первый шаблон!
	blog
	└───templates
	    └───blog
	Теперь создай файл post_list.html
		<html>
		    <p>Hi there!</p>
		    <p>It works!</p>
		</html>
*** публикация! Commit и push кода в репозиторий GitHub
	какие файлы были изменены с момента последнего развёртывания 
	Убедись, что находишься в директории djangogirls
		$ git status
		$ git add --all .
	Примечание: -all («всё») означает, что git также обратит внимание на удалённые файлы (по умолчанию он отслеживает новые/изменённые файлы). Также помни (из третьей главы), что . означает текущую директорию.
	
	Прежде чем мы загрузим файлы, давай проверим, что именно git будет загружать (все файлы, который git готов отправить на сервер, отмечаются шрифтом зелёного цвета):
		$ git status
	Мы почти у цели, пришло время сохранить изменения в истории. К сохраняемой версии мы добавим небольшое сообщение, в котором кратко опишем изменения. Можешь набрать в качестве сообщения всё, что захочешь, однако полезно использовать информативную запись, так будет проще вспомнить внесённые изменения в будущем.
		$ git commit -m "Changed the HTML for the site."
	Примечание: убедись, что используешь двойные кавычки вокруг комментария.
	После того, как мы сделали это, мы загрузим (заpush'им) изменения на GitHub:
		$ git push
*** Загружаем новый код на PythonAnywhere и перезапускаем веб-приложение
	Открой вкладку "терминалы" на PythonAnywhere и переключись на уже запущенную консоль Bash (или новую). Затем набери следующую команду:
		$ cd ~/andy2.pythonanywhere.com
		$ git pull
	Можешь обратить внимание, как твой код будет загружаться на сервер. Если хочешь проверить успешность процедуры — открой вкладку Файлы и просмотри свой код на PythonAnywhere.
	
	Наконец, переключись на вкладку Web и нажми кнопку Reload.
	Обновления должны отобразиться на веб-сайте! Переключись на него и обнови страницу.

*** Django ORM и QuerySet
	QuerySet, по сути, — список объектов заданной модели. QuerySet позволяет читать данные из базы данных, фильтровать и изменять их порядок.
	вывести на экран все записи в нашем блоге:
		python manage.py shell
		(InteractiveConsole)
		>>> from blog.models import Post
		>>> Post.objects.all()
		<QuerySet [<Post: my post title>, <Post: another post title>]>

*** Создаём объект
	Создать объект Post в базе данных можно следующим образом:
		>>> from django.contrib.auth.models import User
		>>> User.objects.all()
		<QuerySet [<User: ola>]>
		>>> me = User.objects.get(username='ola')
		>>> Post.objects.create(author=me, title='Sample title', text='Test')



Добавляем записи
Можешь повеселиться и добавить ещё записей. 2-3 будет достаточно.

*** Фильтрация объектов
		>>> Post.objects.filter(author=me)
		>>> Post.objects.filter(title__contains='title')
	Примечание: обрати внимание на два символа нижнего подчёркивания (_) между title и contains. Django ORM использует этот синтаксис для разделения имён полей ("title") и операций или фильтров ("contains").

	список всех опубликованных записей. Мы просто отфильтруем записи по полю published_date:
		>>> from django.utils import timezone
		>>> Post.objects.filter(published_date__lte=timezone.now())
	
	выберем запись, которую мы хотим опубликовать:
		>>> post = Post.objects.get(title="Sample title")
		>>> post.publish()

*** Сортировка объектов
	QuerySets позволяет сортировать объекты. Давай попробуем сортировку по полю created_date:
		>>> Post.objects.order_by('created_date')
		>>> Post.objects.order_by('-created_date')

*** Соединение QuerySets
		QuerySets можно сцеплять, создавая цепочки:
		>>> Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')
		
		>>> exit()

*** Динамически изменяющиеся данные в шаблонах
	Отдельные части уже размещены в нужных местах: 
	- модель Post определена в файле models.py, 
	- post_list — в файле views.py, 
	- добавлен шаблон. 
	Но как нам отобразить записи в шаблоне HTML-страницы? 

	Для этого и предназначены представления: соединять между собой модели и шаблоны. В post_list представлению нужно будет взять модели, которые мы хотим отобразить, и передать их шаблону. Таким образом, в представлениях мы определяем, что (какая модель) будет отображена в шаблоне.

	Сейчас нас интересует список записей блога, отсортированных по published_date.
		Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')
	Теперь нам нужно включить эту строку кода в файлblog/views.py, добавив её в функцию def post_list(request):
		def post_list(request):
		    posts = Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')
		    return render(request, 'blog/post_list.html', {})

	В функции render у нас уже есть параметр request (т.е. всё, что мы получим от пользователя в качестве запроса через Интернет) и файл шаблона 'blog/post_list.html'. Последний параметр, который выглядит как {}, — это место, куда мы можем добавить что-нибудь для использования в шаблоне. Мы должны задавать имена передаваемым шаблону вещам (прямо сейчас мы остановимся на 'posts' :)). В итоге параметр будет выглядеть следующим образом: {'posts': posts}. Обрати внимание, что часть перед : является строкой; её нужно обернуть в кавычки ''.

	В результате файл blog/views.py должен выглядеть следующим образом:	

		blog/views.py
		from django.shortcuts import render
		from django.utils import timezone
		from .models import Post

		def post_list(request):
		    posts = Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')
		    return render(request, 'blog/post_list.html', {'posts': posts})
	
	Подробнее о QuerySets в Django можно узнать в официальной документации: https://docs.djangoproject.com/en/1.11/ref/models/querysets/

*** Шаблоны Django
	Чтобы вставить переменную в шаблон Django, нам нужно использовать двойные фигурные скобки с именем переменной внутри:
		blog/templates/blog/post_list.html
		{{ posts }}
Попробуй это в шаблоне blog/templates/blog/post_list.html. Замени всё, начиная со второго <div> и вплоть до третьего </div> кодом {{ posts }}. Сохрани файл и обнови страницу, чтобы увидеть результат:

Рисунок 13.1

Как ты можешь заметить, мы получили следующую строку:

blog/templates/blog/post_list.html
<QuerySet [<Post: My second post>, <Post: My first post>]>
Это показывает, что Django понял переменную как список объектов. Помнишь из главы Введение в Python, как мы можем аккуратно отобразить список? Правильно, циклом for! В шаблонах Django ты можешь использовать их таким образом:

blog/templates/blog/post_list.html
{% for post in posts %}
    {{ post }}
{% endfor %}
Попробуй вставить это в свой шаблон.

Рисунок 13.2

Сработало! Но мы хотим, чтобы они отображались как статические записи, которые мы создавали в главе Введение в HTML. Ты можешь смешивать HTML и теги шаблонов. Наш элемент body будет выглядеть следующим образом:

blog/templates/blog/post_list.html
<div>
    <h1><a href="/">Django Girls Blog</a></h1>
</div>

{% for post in posts %}
    <div>
        <p>published: {{ post.published_date }}</p>
        <h1><a href="">{{ post.title }}</a></h1>
        <p>{{ post.text|linebreaksbr }}</p>
    </div>
{% endfor %}
Всё, что ты поместишь между {% for %} и {% endfor %}, будет повторено для каждого объекта в списке. Обнови страницу:

Рисунок 13.3

Ты заметила, что мы использовали немного другую запись в этот раз: {{ post.title }} или {{ post.text }}? Мы обращаемся к различным полям нашей модели Post. Также |linebreaksbr прогоняет текст через фильтр для преобразования переносов строк в параграфы.

Ещё один момент
Пришло время ещё раз убедиться, что наш сайт будет работать в сети, согласна? Попробуем развернуть новую версию сайта на PythonAnywhere. Краткий обзор необходимых шагов...

Сначала загружаем код на GitHub
command-line
$ git status
[...]
$ git add --all .
$ git status
[...]
$ git commit -m "Modified templates to display posts from database."
[...]
$ git push
Затем заходим на PythonAnywhere, открываем Bash console и набираем команду:
PythonAnywhere command-line
$ cd $USER.pythonanywhere.com
$ git pull
[...]
Наконец, переключаемся на вкладку Web и жмём кнопку Reload. Обновления запущены в жизнь! Даже если записи в твоём блоге на PythonAnywhere отличаются от записей в блоге на локальном сервере, то всё в порядке. Базы данных на твоём локальном компьютере и на PythonAnywhere не синхронизируются, в отличиет от остальных файлов проекта.
Поздравляем! Теперь попробуй добавить новые записи через панель администратора Django (не забывай указывать published_date!). Удостоверься, что ты в панели администратора своего сайта на PythonAnywhere (https://yourname.pythonanywhere.com/admin). Затем обнови страницу, чтобы проверить, появились ли новые записи.











		# 
		# 
		# 
		# 
		# 









